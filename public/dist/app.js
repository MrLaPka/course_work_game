!function(Q){var F={};function B(U){if(F[U])return F[U].exports;var I=F[U]={i:U,l:!1,exports:{}};return Q[U].call(I.exports,I,I.exports,B),I.l=!0,I.exports}B.m=Q,B.c=F,B.d=function(Q,F,U){B.o(Q,F)||Object.defineProperty(Q,F,{configurable:!1,enumerable:!0,get:U})},B.r=function(Q){Object.defineProperty(Q,"__esModule",{value:!0})},B.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return B.d(F,"a",F),F},B.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},B.p="dist/",B(B.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./public/src/page_elements/objectOnThePage.js\nclass objectOnThePage {\n  constructor(div) {\n    this.div = document.createElement(div);\n  }\n  create(width, height, innerHTML, id, margin, innerText, className) {\n    if (width !== undefined) this.div.style.width = width;\n    if (height !== undefined) this.div.style.height = height;\n    if (innerHTML !== undefined) this.div.innerHTML = innerHTML;\n    if (id !== undefined) this.div.id = id;\n    if (margin !== undefined) this.div.style.margin = margin;\n    if (innerText !== undefined) this.div.innerText = innerText;\n    if (className !== undefined) this.div.className = className;\n  }\n\n  positioning(zIndex, display, position, textAlign) {\n    if (zIndex !== undefined) this.div.style.zIndex = zIndex;\n    if (display !== undefined) this.div.style.display = display;\n    if (position !== undefined) this.div.style.position = position;\n    if (textAlign !== undefined) this.div.style.textAlign = textAlign;\n  }\n\n  pointBack(align, background, backgroundSize, backgroundColor, opacity, color, visibility) {\n    if (align !== undefined) this.div.align = align;\n    if (background !== undefined) this.div.style.background = background;\n    if (backgroundSize !== undefined) this.div.style.backgroundSize = backgroundSize;\n    if (backgroundColor !== undefined) this.div.style.backgroundColor = backgroundColor;\n    if (opacity !== undefined) this.div.style.opacity = opacity;\n    if (color !== undefined) this.div.style.color = color;\n    if (visibility !== undefined) this.div.style.visibility = visibility;\n  }\n\n  addEventListener(event, callback) {\n    this.div.addEventListener(event, callback);\n  }\n\n  appendChild(elem) {\n    this.div.appendChild(elem.div);\n  }\n\n  setPaddings(paddingTop, paddingLeft, paddingRight, paddingBottom) {\n    if (paddingTop !== undefined) this.div.style.paddingTop = paddingTop;\n    if (paddingLeft !== undefined) this.div.style.paddingLeft = paddingLeft;\n    if (paddingRight !== undefined) this.div.style.paddingRight = paddingRight;\n    if (paddingBottom !== undefined) this.div.style.paddingBottom = paddingBottom;\n  }\n\n  setDistance(top, bottom, left, right) {\n    if (top !== undefined) this.div.style.top = top;\n    if (bottom !== undefined) this.div.style.bottom = bottom;\n    if (left !== undefined) this.div.style.left = left;\n    if (right !== undefined) this.div.style.right = right;\n  }\n\n  remove() {\n    this.div.remove();\n  }\n\n  fonts(fontSize, fontFamily) {\n    if (fontSize !== undefined) this.div.style.fontSize = fontSize;\n    if (fontFamily !== undefined) this.div.style.fontFamily = fontFamily;\n  }\n\n  borders(border, borderColor) {\n    if (borderColor !== undefined) this.div.style.borderColor = borderColor;\n    if (border !== undefined) this.div.style.border = border;\n  }\n\n  setMargins(marginTop, marginLeft, marginRight, marginBottom) {\n    if (marginTop !== undefined) this.div.style.marginTop = marginTop;\n    if (marginLeft !== undefined) this.div.style.marginLeft = marginLeft;\n    if (marginRight !== undefined) this.div.style.marginRight = marginRight;\n    if (marginBottom !== undefined) this.div.style.marginBottom = marginBottom;\n  }\n\n  forButton(enabled, disabled) {\n    if (enabled !== undefined) this.div.enabled = enabled;\n    if (disabled !== undefined) this.div.disabled = disabled;\n  }\n\n  specialSettings(draggable) {\n    if (draggable !== undefined) this.div.draggable = draggable;\n  }\n\n}\n// CONCATENATED MODULE: ./public/src/page_elements/Image.js\n\nclass Image extends objectOnThePage {\n  constructor() {\n    super("img");\n  }\n\n  create(src, width, height, innerHTML, id, margin, innerText, className) {\n    super.create(width, height, innerHTML, id, margin, innerText);\n    if (src !== undefined) this.div.src = src;\n  }\n}\n// CONCATENATED MODULE: ./public/src/page_elements/Input.js\n\nclass Input extends objectOnThePage {\n\n    constructor() {\n        super(\'input\');\n    }\n\n    create(type, required, width, height, innerHTML, id, margin, innerText, className) {\n        super.create(width, height, innerHTML, id, margin, innerText);\n        if (type !== undefined) this.div.type = type;\n        if (required !== undefined) this.div.required = required;\n    }\n\n    value(val) {\n        if (val) this.div.value = val;else return this.div.value;\n    }\n\n}\n// CONCATENATED MODULE: ./public/src/tasks/randomGen/randomName.js\nclass getName {\n  constructor() {\n    this.firstName = ["Vicious", "Terrible", "Huge", "Smelly", "Snotty", "Stuped", "Fierce", "Poisonous", "Thorny", "Toothy"];\n\n    this.secondName = ["Ogre", "Gnome", "Elf", "Giant", "Troll", "Zombie", "Orc", "Trent", "Centaur", "Spirit"];\n\n    this.thirdName = ["Pharaoph", "Egor Kreed", "Drake", "Lil Pump", "Face", "Eljey", "Kizaru", "Obladaet", "Poroshenko", "Tramp"];\n  }\n  randomName(arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n  }\n\n  getMonsterName() {\n    return `${this.randomName(this.firstName)} ${this.randomName(this.secondName)} ${this.randomName(this.thirdName)}`;\n  }\n}\n// CONCATENATED MODULE: ./public/src/character/monster/monsterGeneration.js\n\nclass monsterGeneration_monsterRender {\n\n    createHead() {\n        const monsterHeaders = ["img/Monster_parts/head01.png", "img/Monster_parts/head02.png", "img/Monster_parts/head03.png"];\n        let randomHead = monsterHeaders[Math.floor(Math.random() * monsterHeaders.length)];\n        this.Head = new objectOnThePage(\'div\');\n        this.Head.create(\'3.750em\', \'3.563em\');\n        this.Head.positioning("1010", undefined, "absolute");\n        this.Head.setMargins("24.3em", "90.3em");\n        this.Head.pointBack(undefined, `url(${randomHead})`, "100%");\n    }\n\n    createBody() {\n        const monsterBodies = ["img/Monster_parts/body01.png", "img/Monster_parts/body02.png", "img/Monster_parts/body03.png"];\n        let randomBody = monsterBodies[Math.floor(Math.random() * monsterBodies.length)];\n        this.Body = new objectOnThePage(\'div\');\n        this.Body.create(\'5.000em\', \'5.313em\');\n        this.Body.positioning("1000", undefined, "absolute");\n        this.Body.setMargins("25.625em", "89.813em");\n        this.Body.pointBack(undefined, `url(${randomBody})`, "100%");\n    }\n\n    createArms() {\n        const monsterArms = ["img/Monster_parts/arm01.png", "img/Monster_parts/arm02.png", "img/Monster_parts/arm03.png"];\n        let randomArms = monsterArms[Math.floor(Math.random() * monsterArms.length)];\n        this.leftArm = new objectOnThePage(\'div\');\n        this.leftArm.create(\'2.188em\', \'3.750em\', undefined, \'leftArm\');\n        this.leftArm.positioning("900", undefined, "absolute");\n        this.leftArm.setMargins("26.563em", "88.938em");\n        this.leftArm.pointBack(undefined, `url(${randomArms})`, "100%");\n        this.rightArm = new objectOnThePage(\'div\');\n        this.rightArm.create(\'2.188em\', \'3.550em\', undefined);\n        this.rightArm.positioning("1010", undefined, "absolute");\n        this.rightArm.setMargins("26.875em", "93.563em");\n        if (randomArms === "img/Monster_parts/arm01.png") {\n            this.rightArm.pointBack(undefined, `url(img/Monster_parts/arm06.png)`, "100%");\n        } else if (randomArms === "img/Monster_parts/arm02.png") {\n            this.rightArm.pointBack(undefined, `url(img/Monster_parts/arm05.png)`, "100%");\n        } else if (randomArms === "img/Monster_parts/arm03.png") {\n            this.rightArm.pointBack(undefined, `url(img/Monster_parts/arm04.png)`, "100%");\n        }\n    }\n\n    createLegs() {\n        const monsterLegs = ["img/Monster_parts/leg01.png", "img/Monster_parts/leg02.png", "img/Monster_parts/leg03.png"];\n        let randomLegs = monsterLegs[Math.floor(Math.random() * monsterLegs.length)];\n        this.leftLeg = new objectOnThePage(\'div\');\n        this.leftLeg.create(\'2.188em\', \'3.125em\', undefined);\n        this.leftLeg.positioning("900", undefined, "absolute");\n        this.leftLeg.setMargins("30.188em", "90.438em");\n        this.leftLeg.pointBack(undefined, `url(${randomLegs})`, "100%");\n        this.rightLeg = new objectOnThePage(\'div\');\n        this.rightLeg.create(\'2.188em\', \'3.063em\', undefined);\n        this.rightLeg.positioning("910", undefined, "absolute");\n        this.rightLeg.setMargins("30.438em", "91.875em");\n        if (randomLegs === "img/Monster_parts/leg01.png") {\n            this.rightLeg.pointBack(undefined, `url(img/Monster_parts/leg04.png)`, "100%");\n        } else if (randomLegs === "img/Monster_parts/leg02.png") {\n            this.rightLeg.pointBack(undefined, `url(img/Monster_parts/leg05.png)`, "100%");\n        } else if (randomLegs === "img/Monster_parts/leg03.png") {\n            this.rightLeg.pointBack(undefined, `url(img/Monster_parts/leg06.png)`, "100%");\n        }\n    }\n\n    createWeapon() {\n        const monsterWeapons = ["img/Monster_parts/weapon01.png", "img/Monster_parts/weapon02.png", "img/Monster_parts/weapon03.png"];\n        let randomWeapon = monsterWeapons[Math.floor(Math.random() * monsterWeapons.length)];\n        this.Weapon = new objectOnThePage(\'div\');\n        this.Weapon.create(\'10.000em\', \'7.000em\', undefined, \'weapon\');\n        this.Weapon.positioning("1010", undefined, "absolute");\n        this.Weapon.setMargins("27.000em", "85.750em");\n        this.Weapon.pointBack(undefined, `url(${randomWeapon}) no-repeat`, "50%");\n    }\n\n    createMonster(monster) {\n        monster.create(undefined, undefined, undefined, \'monster\');\n        monster.setMargins(\'14em\');\n        monster.positioning(undefined, undefined, "absolute");\n        monster.appendChild(this.Head);\n        monster.appendChild(this.Body);\n        monster.appendChild(this.leftArm);\n        monster.appendChild(this.rightArm);\n        monster.appendChild(this.leftLeg);\n        monster.appendChild(this.rightLeg);\n        monster.appendChild(this.Weapon);\n    }\n\n}\n\n/* harmony default export */ var monsterGeneration = (monsterGeneration_monsterRender);\n// CONCATENATED MODULE: ./public/src/tasks/randomGen/randomBackground.js\nclass randomBackground {\n  constructor() {\n    this.backgrounds = ["img/backgrounds/BGLAYERS_EXAMPLE[1].png", "img/backgrounds/desert_day[1].jpg", "img/backgrounds/terrain.png", "img/backgrounds/fon14[1].png"];\n  }\n\n  generateBackgrounds() {\n    return this.backgrounds[Math.floor(Math.random() * this.backgrounds.length)];\n  }\n}\n// CONCATENATED MODULE: ./public/src/character/gg/ggRender.js\nclass ggRender {\n    constructor(gg) {\n        gg.create(\'img/gg.png\', \'10.938em\', \'10.000em\', undefined, \'ggId\');\n        gg.setMargins("38.000em", "21.875em");\n        gg.positioning("1000", undefined, "absolute");\n    }\n}\n// CONCATENATED MODULE: ./public/src/character/gg/interfaceGgRender.js\n\n\nclass interfaceGgRender_interfaceGgRender {\n\n    static create(value) {\n        this.hpGg = 12.563;\n        let hp = new objectOnThePage(\'div\');\n        hp.create(\'12.563em\', \'1.250em\', undefined, \'gghp\');\n        hp.positioning(\'1000\', "inline-block", "absolute");\n        hp.setMargins(\'9.375em\', \'20.625em\');\n        hp.pointBack(undefined, "repeating-linear-gradient(-45deg,#606dbc,#606dbc 0.625em,#465298 0.625em,#465298 1.250em)");\n        document.getElementById(\'globalPlayWindow\').appendChild(hp.div);\n        let nameGg = new objectOnThePage(\'div\');\n        nameGg.create(\'18.750em\', \'1.875em\', undefined, \'namegg\');\n        nameGg.setMargins(\'4.375em\', \'21.875em\');\n        nameGg.positioning(\'1000\', "inline-block", "absolute");\n        let pName = new objectOnThePage(\'p\');\n        pName.create(undefined, undefined, undefined, undefined, undefined, value);\n        pName.pointBack(undefined, undefined, undefined, undefined, undefined, \'Lime\');\n        pName.fonts(\'1.875em\');\n        nameGg.appendChild(pName);\n        document.getElementById(\'globalPlayWindow\').appendChild(nameGg.div);\n    }\n\n    static getDamage() {\n        this.hpGg -= 4.1876;\n        document.getElementById(\'gghp\').style.width = this.hpGg + \'em\';\n    }\n\n}\n// CONCATENATED MODULE: ./public/src/character/monster/interfaceMonsterRender.js\n\nclass interfaceMonsterRender_interfaceMonsterRender {\n\n    static setRound() {\n        this.round = 1;\n    }\n\n    static changeRound() {\n        if (this.round < 3) {\n            this.round++;\n        }\n    }\n\n    static create(getMonsterName) {\n        if (this.round === undefined) {\n            this.setRound();\n        }\n        console.log(this.round);\n        this.hpMonster = this.round * 12.563;\n        let hp = new objectOnThePage(\'div\');\n        hp.create(this.hpMonster + \'em\', \'1.250em\', undefined, \'monsterhp\');\n        hp.setMargins(\'9.375em\', \'80.625em\');\n        hp.positioning(\'1000\', "inline-block", "absolute");\n        hp.pointBack(undefined, "repeating-linear-gradient(45deg,#606dbc,#606dbc 0.625em,#465298 0.625em,#465298 1.250em)");\n        document.getElementById(\'globalPlayWindow\').appendChild(hp.div);\n        let nameMonster = new objectOnThePage(\'div\');\n        nameMonster.create(\'25.000em\', \'1.875em\', undefined, \'namemonster\');\n        nameMonster.setMargins(\'4.375em\', \'79.375em\');\n        nameMonster.positioning(\'1000\', "inline-block", "absolute");\n        let pName = new objectOnThePage(\'p\');\n        pName.create(undefined, undefined, undefined, undefined, undefined, getMonsterName);\n        pName.pointBack(undefined, undefined, undefined, undefined, undefined, \'OrangeRed\');\n        pName.fonts(\'1.875em\');\n        nameMonster.appendChild(pName);\n        document.getElementById(\'globalPlayWindow\').appendChild(nameMonster.div);\n    }\n\n    static getDamage(bigCapacity) {\n        let damage;\n        if (bigCapacity) damage = 8.3752;else {\n            damage = 4.1876;\n        }\n        console.log(damage);\n        this.hpMonster -= damage;\n        if (this.hpMonster < 0) {\n            this.hpMonster = 0;\n        }\n        document.getElementById(\'monsterhp\').style.width = this.hpMonster + \'em\';\n    }\n\n}\n// CONCATENATED MODULE: ./public/src/buttons/spellBookButtonRender.js\nclass spellBookButtonRender {\n    constructor(spellBook) {\n        spellBook.create(undefined, undefined, undefined, \'spellbutton\', undefined, "Spellbook");\n        spellBook.setMargins(\'8.125em\', "58.750em");\n        spellBook.positioning("1010", undefined, "absolute");\n    }\n}\n// CONCATENATED MODULE: ./public/src/getInfo.js\n\n\nclass getInfo_getInfo {\n  static getId(checkSQL) {\n    let request = new XMLHttpRequest();\n    request.open("POST", "/check", true);\n    request.setRequestHeader("Content-Type", "application/json");\n    request.addEventListener("load", () => {\n      if (JSON.parse(request.response).res === "undefined") {\n        document.getElementById("errorEnter").style.visibility = "visible";\n        document.getElementById("enterH2").style.borderColor = "red";\n        document.getElementById("errorEnter").innerText = "Incorrect name!";\n      } else if (JSON.parse(request.response).id !== 0) {\n        this.users = JSON.parse(request.response).id;\n\n        document.getElementById("windowName").style.display = "none";\n\n        toRun_toRun.run();\n      }\n    });\n\n    request.send(checkSQL);\n  }\n}\n// CONCATENATED MODULE: ./public/src/windows/endWindow.js\n\n\n\n\n\n\n\n\nclass endWindow_endWindow {\n    endWinCreate() {\n        let score;\n        score = interfaceMonsterRender_interfaceMonsterRender.round * Math.round(interfaceGgRender_interfaceGgRender.hpGg * 7.9598) + (interfaceMonsterRender_interfaceMonsterRender.round * 100 - Math.round(interfaceMonsterRender_interfaceMonsterRender.hpMonster * 7.9598));\n        let windowEnd = new objectOnThePage(\'div\');\n        windowEnd.create(\'32.000em\', \'12.500em\', undefined, undefined, \'auto\');\n        windowEnd.positioning(\'1\', \'block\', \'absolute\', \'center\');\n        windowEnd.setDistance(\'0\', \'0\', \'0\', \'0\');\n        windowEnd.pointBack(undefined, undefined, undefined, \'black\', \'.5\', \'white\');\n        let victoryH2 = new objectOnThePage(\'h2\');\n        victoryH2.fonts(\'3em\', \'sans-serif\');\n        let playAgainButton = new objectOnThePage(\'button\');\n        playAgainButton.create(undefined, undefined, undefined, undefined, undefined, "PLAY AGAIN");\n        playAgainButton.fonts(\'1.5em\');\n        playAgainButton.addEventListener(\'click\', function () {\n            windowEnd.remove();\n            interfaceGgRender_interfaceGgRender.hpGg = 12.563;\n            interfaceMonsterRender_interfaceMonsterRender.hpMonster = interfaceGgRender_interfaceGgRender.hpGg;\n            document.getElementById(\'globalPlayWindow\').remove();\n\n            toRun_toRun.run();\n        });\n        if (Math.round(interfaceMonsterRender_interfaceMonsterRender.hpMonster) === 0) {\n            const audioElem = `<audio src=\'audio/Sound_15630.mp3\' id = \'victory\' autoplay = \'autoplay\'></audio>`;\n            windowEnd.create(undefined, undefined, audioElem);\n            victoryH2.create(undefined, undefined, undefined, undefined, undefined, "VICTORY");\n            let NextRoundButton = new objectOnThePage(\'button\');\n            NextRoundButton.create(undefined, undefined, undefined, undefined, undefined, "NEXT ROUND");\n            NextRoundButton.fonts(\'1.5em\');\n            let ScorePlace = new objectOnThePage(\'h3\');\n            ScorePlace.create(undefined, undefined, undefined, undefined, undefined, "Score: " + score);\n            ScorePlace.fonts(undefined, \'sans-serif\');\n            windowEnd.appendChild(ScorePlace);\n            windowEnd.appendChild(victoryH2);\n            windowEnd.appendChild(playAgainButton);\n            windowEnd.appendChild(NextRoundButton);\n            NextRoundButton.addEventListener(\'click\', function () {\n                taskGeneration_taskGeneration.changeCapacity();\n                interfaceMonsterRender_interfaceMonsterRender.changeRound();\n                const updateSQL = JSON.stringify({ id: getInfo_getInfo.users, score: score });\n                let request = new XMLHttpRequest();\n                request.open(\'POST\', \'/update\', true);\n                request.setRequestHeader(\'Content-Type\', \'application/json\');\n                request.addEventListener(\'load\', () => {});\n                request.send(updateSQL);\n                windowEnd.remove();\n                interfaceGgRender_interfaceGgRender.hpGg = 12.563;\n                interfaceMonsterRender_interfaceMonsterRender.hpMonster = interfaceGgRender_interfaceGgRender.hpGg;\n                document.getElementById(\'globalPlayWindow\').remove();\n\n                toRun_toRun.run();\n            });\n        } else {\n            const audioElem = `<audio src=\'audio/pole_chudes_-_zvuk_proigrysha_(SongHouse.me).mp3\' id = \'fail\' autoplay = \'autoplay\'></audio>`;\n            windowEnd.create(undefined, undefined, audioElem);\n            victoryH2.create(undefined, undefined, undefined, undefined, undefined, "GAME OVER!");\n            let ScorePlace = new objectOnThePage(\'h3\');\n            ScorePlace.create(undefined, undefined, undefined, undefined, undefined, "Score: " + score);\n            ScorePlace.fonts(undefined, \'sans-serif\');\n            windowEnd.appendChild(victoryH2);\n            windowEnd.appendChild(ScorePlace);\n            windowEnd.appendChild(playAgainButton);\n        }\n        let mainMenuButton = new objectOnThePage(\'button\');\n        mainMenuButton.create(undefined, undefined, undefined, undefined, undefined, "MENU");\n        mainMenuButton.fonts(\'1.5em\');\n        windowEnd.appendChild(mainMenuButton);\n        document.body.appendChild(windowEnd.div);\n        if (document.getElementById(\'fail\')) {\n            if (document.getElementById(\'disabled\')) {\n                document.getElementById(\'fail\').volume = 0;\n            } else if (document.getElementById(\'enabled\')) {\n                document.getElementById(\'fail\').volume = 1;\n            }\n        }\n\n        if (document.getElementById(\'victory\')) {\n            if (document.getElementById(\'disabled\')) {\n                document.getElementById(\'victory\').volume = 0;\n            } else if (document.getElementById(\'enabled\')) {\n                document.getElementById(\'victory\').volume = 1;\n            }\n        }\n\n        mainMenuButton.addEventListener(\'click\', function () {\n            if (Math.round(interfaceMonsterRender_interfaceMonsterRender.hpMonster) === 0) {\n                taskGeneration_taskGeneration.changeCapacity();\n                interfaceMonsterRender_interfaceMonsterRender.changeRound();\n            }\n            const updateSQL = JSON.stringify({ id: getInfo_getInfo.users, score: score });\n            let request = new XMLHttpRequest();\n            request.open(\'POST\', \'/update\', true);\n            request.setRequestHeader(\'Content-Type\', \'application/json\');\n            request.send(updateSQL);\n\n            interfaceGgRender_interfaceGgRender.hpGg = 12.563;\n            interfaceMonsterRender_interfaceMonsterRender.hpMonster = interfaceGgRender_interfaceGgRender.hpGg;\n            windowEnd.remove();\n            document.getElementById(\'globalPlayWindow\').remove();\n            const letStart = new init_init();\n            letStart.startWindowRender();\n            letStart.startWindowInterface();\n            letStart.audioCreate();\n            letStart.createScore();\n            letStart.createScreen();\n            document.getElementById("info").style.display = \'block\';\n        });\n    }\n}\n// CONCATENATED MODULE: ./public/src/character/gg/faerbolRender.js\n\n\n\n\n\nclass faerbolRender_faerbolRender {\n  createFaerbol(bigCapacity, src) {\n    this.backgroundBlock();\n    let faerbol = new Image();\n    faerbol.create(`${src}`, "10.000em", "4.375em");\n    faerbol.positioning("1000", undefined, "absolute");\n    faerbol.setMargins("40em", "25.625em");\n    document.getElementById("globalPlayWindow").appendChild(faerbol.div);\n    $(faerbol.div).queue(function () {\n      setTimeout(function () {\n        document.getElementById(\'rightAnswer\').remove();\n      }, 1000);\n      $(this).dequeue();\n    });\n    $(faerbol.div).queue(function () {\n      {\n        $(faerbol.div).animate({ left: "+=940" }, 2000);\n      }\n      $(this).dequeue();\n    });\n    $(faerbol.div).queue(function () {\n      $(this).hide();\n      $(this).dequeue();\n    });\n    $(faerbol.div).queue(function () {\n      interfaceMonsterRender_interfaceMonsterRender.getDamage(bigCapacity);\n      if (Math.round(interfaceMonsterRender_interfaceMonsterRender.hpMonster) === 0) {\n        document.getElementById("mortalCombat").remove();\n        let audioMonsterDie = `<audio src=\'audio/krik-orka.mp3\' id = \'MonsterDie\' autoplay = \'autoplay\'></audio>`;\n        document.getElementById("globalPlayWindow").innerHTML += audioMonsterDie;\n        if (document.getElementById("disabled")) {\n          document.getElementById("MonsterDie").volume = 0;\n        } else if (document.getElementById("enabled")) {\n          document.getElementById("MonsterDie").volume = 1;\n        }\n        setTimeout(function () {\n          document.getElementById("monster").style.marginLeft = "88.938em";\n          document.getElementById("monster").style.marginTop = "20em";\n          document.getElementById("monster").innerHTML = \'<img src ="img/vzrbIV.gif">\';\n        }, 500);\n        setTimeout(function () {\n          document.getElementById("monster").style.marginTop = "9em";\n          document.getElementById("monster").style.marginLeft = "83em";\n          document.getElementById("monster").innerHTML = `<img src = \'img/faer.gif\'>`;\n        }, 1000);\n        setTimeout(function () {\n          const eW = new endWindow_endWindow();\n          eW.endWinCreate();\n        }, 500);\n      } else {\n        document.getElementById("spellbutton").disabled = false;\n      }\n      $(this).dequeue();\n    });\n    let audioGetDamage = new objectOnThePage("div");\n    audioGetDamage.create("0%", "0%", undefined, "getDamage");\n    $(faerbol.div).queue(function () {\n      const audioElem = `<audio src=\'audio/muzhskie-stony (mp3cut.ru).mp3\' id = \'getdamage\' autoplay = \'autoplay\'></audio>`;\n      audioGetDamage.create(undefined, undefined, audioElem);\n      document.getElementById("globalPlayWindow").appendChild(audioGetDamage.div);\n      if (document.getElementById("disabled")) {\n        document.getElementById("getdamage").volume = 0;\n      } else {\n        document.getElementById("getdamage").volume = 1;\n      }\n      document.getElementById("monster").style.filter = "hue-rotate(290deg)";\n      setTimeout(function () {\n        document.getElementById("monster").style.filter = "hue-rotate(360deg)";\n      }, 1000);\n      $(this).dequeue();\n    });\n    $(faerbol.div).queue(function () {\n      faerbol.remove();\n      $(this).dequeue();\n    });\n  }\n\n  backgroundBlock() {\n    this.rightAnswer = new objectOnThePage("div");\n    this.rightAnswer.create("100%", "100%", "<p>You answer is right!</p>", "rightAnswer", "auto");\n    this.rightAnswer.positioning("2100", "block", "absolute", "center");\n    this.rightAnswer.setDistance("0", "0", "0", "0");\n    this.rightAnswer.pointBack(undefined, undefined, undefined, "limegreen", "0.35", "white");\n\n    this.rightAnswer.fonts("3em");\n    document.getElementById("globalPlayWindow").appendChild(this.rightAnswer.div);\n  }\n\n}\n// CONCATENATED MODULE: ./public/src/character/monster/monsterFaerbolRender.js\n\n\n\n\n\nclass monsterFaerbolRender_monsterFaerbolRender {\n  createFaerbol() {\n    this.wrongAnswer();\n    let faerbol = new Image();\n    faerbol.create("img/monsterfaerbol1.gif", "10.000em", "4.375em");\n    faerbol.positioning("1000", undefined, "absolute");\n    faerbol.setMargins("40em", "78.125em");\n    document.getElementById("globalPlayWindow").appendChild(faerbol.div);\n    $(faerbol.div).queue(function () {\n      setTimeout(function () {\n        document.getElementById("wrongAnswer").remove();\n      }, 1000);\n      $(this).dequeue();\n    });\n    $("#leftArm").toggleClass("transform");\n    $("#weapon").toggleClass("transform");\n    setTimeout($(faerbol.div).animate({ left: "-=815" }, 2000), 600);\n    setTimeout(function () {\n      $("#leftArm").toggleClass("transform");\n      setTimeout(function () {\n        $("#weapon").toggleClass("transform");\n      }, 0);\n    }, 600);\n    $(faerbol.div).queue(function () {\n      $(this).hide();\n      $(this).dequeue();\n    });\n    $(faerbol.div).queue(function () {\n      interfaceGgRender_interfaceGgRender.getDamage();\n      if (Math.round(interfaceGgRender_interfaceGgRender.hpGg) === 0) {\n        document.getElementById("mortalCombat").remove();\n        const eW = new endWindow_endWindow();\n        eW.endWinCreate();\n      } else {\n        document.getElementById("spellbutton").disabled = false;\n      }\n      $(this).dequeue();\n    });\n    let audioGetDamage = new objectOnThePage("div");\n    $(faerbol.div).queue(function () {\n      const audioElem = `<audio src=\'audio/muzhskie-stony (mp3cut.ru).mp3\' id = \'getDamage\' autoplay = \'autoplay\'></audio>`;\n      audioGetDamage.create("0%", "0%", audioElem, "Damage");\n      document.getElementById("globalPlayWindow").appendChild(audioGetDamage.div);\n      if (document.getElementById("disabled")) {\n        document.getElementById("getDamage").volume = 0;\n      } else if (document.getElementById("enabled")) {\n        document.getElementById("getDamage").volume = 1;\n      }\n      document.getElementById("ggId").style.filter = "hue-rotate(290deg)";\n      if (Math.round(interfaceGgRender_interfaceGgRender.hpGg) != 0) {\n        setTimeout(function () {\n          document.getElementById("ggId").style.filter = "hue-rotate(360deg)";\n        }, 1000);\n      }\n      $(this).dequeue();\n    });\n    $(faerbol.div).queue(function () {\n      faerbol.remove();\n      $(this).dequeue();\n    });\n  }\n\n  wrongAnswer() {\n    let wrongAnswer = new objectOnThePage("div");\n    wrongAnswer.create("100%", "100%", "<p>You answer is wrong!</p>", "wrongAnswer", "auto");\n    wrongAnswer.positioning("2100", "block", "absolute", "center");\n    wrongAnswer.setDistance("0", "0", "0", "0");\n    wrongAnswer.pointBack(undefined, undefined, undefined, "rgb(255, 107, 107)", "0.35", "white");\n\n    wrongAnswer.fonts("3em");\n    document.getElementById("globalPlayWindow").appendChild(wrongAnswer.div);\n  }\n\n}\n// CONCATENATED MODULE: ./public/src/tasks/checkTasks/check.js\n\n\n\nclass check_check {\n    check(solution, numberTask, bigCapacity) {\n        Math.round(solution);\n        let taskArr = numberTask.split(\' \');\n        let firstNumber = Math.round(parseInt(taskArr[0]));\n        let secondNumber = Math.round(parseInt(taskArr[2]));\n        let trueAnswer = 0;\n        if (taskArr[1] == \'+\') {\n            trueAnswer = firstNumber + secondNumber;\n        } else if (taskArr[1] == \'-\') {\n            trueAnswer = firstNumber - secondNumber;\n        } else if (taskArr[1] == \'*\') {\n            trueAnswer = firstNumber * secondNumber;\n        }\n        if (solution === trueAnswer) {\n            const fR = new faerbolRender_faerbolRender();\n            fR.createFaerbol(bigCapacity, \'img/faerbol.gif\');\n        } else if (solution != trueAnswer) {\n            const mFR = new monsterFaerbolRender_monsterFaerbolRender();\n            mFR.createFaerbol();\n        }\n    }\n}\n// CONCATENATED MODULE: ./public/src/tasks/randomGen/getOperation.js\nclass getOperation {\n    randomOperation(arr, capacity, bigCapacity) {\n        let number = [];\n        if (bigCapacity) capacity += 1;\n        for (let i = 0; i < capacity; i++) {\n            number[i] = arr[Math.floor(Math.random() * arr.length)];\n        }\n        if (parseInt(number[0])) return number.join(\'\');\n        return number[0];\n    }\n\n    createOperation(capacity, bigCapacity) {\n        const numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n        const operators = [\'-\', \'+\', \'*\'];\n        let firstNumber = this.randomOperation(numbers, capacity, bigCapacity);\n        let secondNumber = this.randomOperation(numbers, capacity, bigCapacity);\n        let operation = this.randomOperation(operators, capacity, bigCapacity);\n        if (firstNumber < secondNumber && operation === \'-\') {\n            let i = firstNumber;\n            firstNumber = secondNumber;\n            secondNumber = i;\n        }\n        return `${firstNumber} ${operation} ${secondNumber}`;\n    }\n\n}\n// CONCATENATED MODULE: ./public/src/tasks/taskGeneration.js\n\n\n\n\n\nclass taskGeneration_taskGeneration {\n  static setCapacity() {\n    this.capacity = 1;\n  }\n\n  static changeCapacity() {\n    if (this.capacity < 3) {\n      this.capacity += 1;\n    }\n  }\n\n  static generate(bigCapacity) {\n    let taskWindow = new objectOnThePage("div");\n    taskWindow.create("100%", "100%", undefined, undefined, "auto", undefined);\n    taskWindow.positioning("1110", "block", "absolute", "center");\n    taskWindow.pointBack(undefined, undefined, undefined, "white", "1", "black");\n    taskWindow.setDistance("0", "0", "0", "0");\n    let solutionExH2 = new objectOnThePage("h2");\n    solutionExH2.create(undefined, undefined, undefined, undefined, undefined, "Write the solution in an empty field");\n    solutionExH2.fonts("3em", "sans-serif");\n    let task = new objectOnThePage("h3");\n    task.fonts(undefined, "sans-serif");\n    let newOperation = new getOperation();\n    if (this.capacity === undefined) {\n      this.setCapacity();\n    }\n    let numberTask = newOperation.createOperation(this.capacity, bigCapacity);\n    task.create(undefined, undefined, undefined, undefined, undefined, numberTask);\n    let solutionArea = new Input();\n    solutionArea.create("text", undefined, undefined, undefined, undefined, "solutionArea");\n    let enterButton = new objectOnThePage("button");\n    enterButton.create(undefined, undefined, undefined, "enterButton1", undefined, "Check the answer!");\n    enterButton.fonts("1.5em");\n    taskWindow.appendChild(solutionExH2);\n    taskWindow.appendChild(task);\n    taskWindow.appendChild(solutionArea);\n    taskWindow.appendChild(enterButton);\n    document.getElementById("globalPlayWindow").appendChild(taskWindow.div);\n\n    $("#solutionArea").keyup(function (event) {\n      if (event.keyCode == 13) {\n        $("#enterButton1").click();\n      }\n    });\n\n    enterButton.addEventListener("click", function () {\n      if (solutionArea.value().match(/\\D/g) || !solutionArea.value().match(/\\d/)) {\n        alert("Please enter correctly you solution to continue!");\n      } else {\n        const checking = new check_check();\n        checking.check(parseInt(solutionArea.value()), numberTask, bigCapacity);\n        taskWindow.remove();\n        document.getElementById("spellbook").remove();\n      }\n    });\n  }\n}\n// CONCATENATED MODULE: ./public/src/tasks/randomGen/randomRiddles.js\nclass randomRiddles {\n\n    constructor(riddles) {\n        this.riddles = riddles;\n    }\n\n    random() {\n        const keys = Object.keys(this.riddles);\n        return this.riddles[keys[Math.floor(Math.random() * keys.length)]];\n    }\n\n    getKeyByValue(value) {\n        for (let prop in this.riddles) {\n            if (this.riddles.hasOwnProperty(prop)) {\n                if (this.riddles[prop] === value) return prop;\n            }\n        }\n    }\n\n}\n// CONCATENATED MODULE: ./public/src/tasks/checkTasks/checkSolutionRiddle.js\n\n\n\n\nclass checkSolutionRiddle_checkSolutionRiddle {\n    check(solution, numberTask) {\n\n        let request = new XMLHttpRequest();\n        request.open(\'POST\', \'/getRiddles\', true);\n        request.setRequestHeader(\'Content-Type\', \'application/json\');\n        request.addEventListener(\'load\', () => {\n            let riddles = {};\n            for (let i = 0; i < JSON.parse(request.response).length; i++) {\n                let key = String(JSON.parse(request.response)[i].key);\n                riddles[`${key}`] = String(JSON.parse(request.response)[i].riddle);\n            }\n\n            let newRiddles = new randomRiddles(riddles);\n            if (newRiddles.getKeyByValue(String(numberTask)) === solution) {\n                const fR = new faerbolRender_faerbolRender();\n                fR.createFaerbol(undefined, \'img/bluefaerball.gif\');\n            } else if (newRiddles.getKeyByValue(String(numberTask)) !== solution) {\n                const mFR = new monsterFaerbolRender_monsterFaerbolRender();\n                mFR.createFaerbol();\n            }\n        });\n        request.send();\n    }\n}\n// CONCATENATED MODULE: ./public/src/tasks/riddlesGeneration.js\n\n\n\n\n\nclass riddlesGeneration_riddlesGeneration {\n  constructor() {\n    this.riddles = {};\n  }\n\n  createInterface() {\n    let request = new XMLHttpRequest();\n    request.open("POST", "/getRiddles", true);\n    request.setRequestHeader("Content-Type", "application/json");\n    request.addEventListener("load", () => {\n\n      for (let i = 0; i < JSON.parse(request.response).length; i++) {\n        let key = String(JSON.parse(request.response)[i].key);\n        this.riddles[`${key}`] = String(JSON.parse(request.response)[i].riddle);\n      }\n\n      let taskWindow = new objectOnThePage("div");\n      taskWindow.create("100%", "100%", undefined, undefined, "auto", undefined);\n      taskWindow.positioning("1110", "block", "absolute", "center");\n      taskWindow.setDistance("0", "0", "0", "0");\n      taskWindow.pointBack(undefined, undefined, undefined, "white", "1", "black");\n      let solutionOfRiddleH2 = new objectOnThePage("h2");\n      solutionOfRiddleH2.create(undefined, undefined, undefined, undefined, undefined, "Write the solution in small letters in an empty field");\n      solutionOfRiddleH2.fonts("3em", "sans-serif");\n      let task = new objectOnThePage("h3");\n      task.fonts(undefined, "sans-serif");\n      let newRiddle = new randomRiddles(this.riddles);\n      let numberTask = newRiddle.random();\n      task.create(undefined, undefined, undefined, undefined, undefined, String(numberTask));\n      let solutionArea = new Input();\n      solutionArea.create("text", undefined, undefined, undefined, undefined, "solutionArea");\n      let enterButton = new objectOnThePage("button");\n      enterButton.create(undefined, undefined, undefined, "enterButton2", undefined, "Check the answer!");\n      enterButton.fonts("1.5em");\n      taskWindow.appendChild(solutionOfRiddleH2);\n      taskWindow.appendChild(task);\n      taskWindow.appendChild(solutionArea);\n      taskWindow.appendChild(enterButton);\n      document.getElementById("globalPlayWindow").appendChild(taskWindow.div);\n\n      $("#solutionArea").keyup(function (event) {\n        if (event.keyCode == 13) {\n          $("#enterButton2").click();\n        }\n      });\n\n      enterButton.addEventListener("click", function () {\n        const cSR = new checkSolutionRiddle_checkSolutionRiddle();\n        cSR.check(solutionArea.value(), numberTask);\n        taskWindow.remove();\n        document.getElementById("spellbook").remove();\n      });\n    });\n    request.send();\n  }\n}\n// CONCATENATED MODULE: ./public/src/tasks/randomGen/randomPictures.js\nclass randomPictures {\n\n    constructor(pictures) {\n        this.pictures = pictures;\n    }\n\n    random() {\n        const keys = Object.keys(this.pictures);\n        return this.pictures[keys[Math.floor(Math.random() * keys.length)]];\n    }\n\n    getKeyByValue(value) {\n        for (let prop in this.pictures) {\n            if (this.pictures.hasOwnProperty(prop)) {\n                if (this.pictures[prop] === value) return prop;\n            }\n        }\n    }\n\n}\n// CONCATENATED MODULE: ./public/src/tasks/checkTasks/checkSolutionPicture.js\n\n\n\n\nclass checkSolutionPicture_checkSolutionPicture {\n    check(solution, numberTask) {\n\n        let request = new XMLHttpRequest();\n        request.open(\'POST\', \'/getPictures\', true);\n        request.setRequestHeader(\'Content-Type\', \'application/json\');\n        request.addEventListener(\'load\', () => {\n            let pictures = {};\n            for (let i = 0; i < JSON.parse(request.response).length; i++) {\n                let key = String(JSON.parse(request.response)[i].answer);\n                pictures[`${key}`] = String(JSON.parse(request.response)[i].src);\n            }\n\n            let newPictures = new randomPictures(pictures);\n            if (newPictures.getKeyByValue(String(numberTask)) === solution) {\n                const fR = new faerbolRender_faerbolRender();\n                fR.createFaerbol(undefined, \'img/lazer.gif\');\n            } else if (newPictures.getKeyByValue(String(numberTask)) !== solution) {\n                const mFR = new monsterFaerbolRender_monsterFaerbolRender();\n                mFR.createFaerbol();\n            }\n        });\n        request.send();\n    }\n}\n// CONCATENATED MODULE: ./public/src/tasks/pictureGeneration.js\n\n\n\n\n\n\nclass pictureGeneration_pictureGeneration {\n  constructor() {\n    let request = new XMLHttpRequest();\n    request.open("POST", "/getPictures", true);\n    request.setRequestHeader("Content-Type", "application/json");\n    request.addEventListener("load", () => {\n      let pictures = {};\n      for (let i = 0; i < JSON.parse(request.response).length; i++) {\n        let key = String(JSON.parse(request.response)[i].answer);\n        pictures[`${key}`] = String(JSON.parse(request.response)[i].src);\n      }\n\n      let taskWindow = new objectOnThePage("div");\n      taskWindow.create("100%", "100%", undefined, undefined, "auto", undefined);\n      taskWindow.positioning("1110", "block", "absolute", "center");\n      taskWindow.setDistance("0", "0", "0", "0");\n      taskWindow.pointBack(undefined, undefined, undefined, "white", "1", "black");\n      let pictureAnswer = new objectOnThePage("h2");\n      pictureAnswer.create(undefined, undefined, undefined, undefined, "0", "Write who on the picture in small letters in an empty field");\n      pictureAnswer.fonts("3em", "sans-serif");\n      const pForImage = new objectOnThePage("p");\n      pForImage.create(undefined, undefined, undefined, undefined, "0");\n      pForImage.positioning(undefined, "block", undefined, "center");\n      let task = new Image();\n      let newPicture = new randomPictures(pictures);\n      let numberTask = newPicture.random();\n      task.create(String(numberTask), "15em", "13em", undefined, undefined, "0");\n      let solutionArea = new Input();\n      solutionArea.create("text", undefined, undefined, undefined, undefined, "solutionArea");\n      let enterButton = new objectOnThePage("button");\n      enterButton.create(undefined, undefined, undefined, "enterButton3", undefined, "Check the answer!");\n      enterButton.fonts("1.5em");\n      pForImage.appendChild(task);\n      taskWindow.appendChild(pictureAnswer);\n      taskWindow.appendChild(pForImage);\n      taskWindow.appendChild(solutionArea);\n      taskWindow.appendChild(enterButton);\n      document.getElementById("globalPlayWindow").appendChild(taskWindow.div);\n\n      $("#solutionArea").keyup(function (event) {\n        if (event.keyCode == 13) {\n          $("#enterButton3").click();\n        }\n      });\n\n      enterButton.addEventListener("click", function () {\n        const cSR = new checkSolutionPicture_checkSolutionPicture();\n        cSR.check(solutionArea.value(), numberTask);\n        taskWindow.remove();\n        document.getElementById("spellbook").remove();\n      });\n    });\n    request.send();\n  }\n}\n// CONCATENATED MODULE: ./public/src/tasks/randomGen/randomExcess.js\nclass randomExcess {\n\n    constructor(pictures) {\n        this.pictures = pictures;\n        console.log(this.pictures);\n    }\n\n    random() {\n\n        let srcArr = [];\n        for (let i = 0; i < 3; i++) {\n            let keyGen = Object.keys(this.pictures)[Math.floor(Math.random() * Object.keys(this.pictures).length)];\n            srcArr[i] = this.pictures[keyGen];\n            delete this.pictures[keyGen];\n        }\n        console.log(srcArr);\n        return srcArr;\n    }\n\n    randomOne() {\n        return this.pictures[Object.keys(this.pictures)[Math.floor(Math.random() * Object.keys(this.pictures).length)]];\n    }\n\n}\n// CONCATENATED MODULE: ./public/src/tasks/chosePictureGeneration.js\n\n\n\n\n\n\nclass chosePictureGeneration_chosePictureGeneration {\n  constructor() {\n    let request = new XMLHttpRequest();\n    request.open("POST", "/getVegetables", true);\n    request.setRequestHeader("Content-Type", "application/json");\n    request.addEventListener("load", () => {\n      this.vegetables = {};\n      for (let i = 0; i < JSON.parse(request.response).length; i++) {\n        let key = String(JSON.parse(request.response)[i].name);\n        this.vegetables[`${key}`] = String(JSON.parse(request.response)[i].src);\n      }\n      this.getFruits();\n    });\n    request.send();\n  }\n\n  getFruits() {\n    let request = new XMLHttpRequest();\n    request.open("POST", "/getFruits", true);\n    request.setRequestHeader("Content-Type", "application/json");\n    request.addEventListener("load", () => {\n      this.fruits = {};\n      let numberTask;\n      for (let i = 0; i < JSON.parse(request.response).length; i++) {\n        let key = String(JSON.parse(request.response)[i].name);\n        this.fruits[`${key}`] = String(JSON.parse(request.response)[i].src);\n      }\n      let randomTask = Math.random();\n      let right;\n      if (randomTask < 0.5) {\n        let newPictures = new randomExcess(this.fruits);\n        numberTask = newPictures.random();\n        let newOnePicture = new randomExcess(this.vegetables);\n        right = newOnePicture.randomOne();\n        numberTask.push(right);\n      } else {\n        let newPictures = new randomExcess(this.vegetables);\n        numberTask = newPictures.random();\n        let newOnePicture = new randomExcess(this.fruits);\n        right = newOnePicture.randomOne();\n        numberTask.push(right);\n      }\n\n      let taskWindow = new objectOnThePage("div");\n      taskWindow.create("100%", "100%", undefined, undefined, "auto", undefined, "chosePicture");\n      taskWindow.positioning("1100", "block", "absolute", "center");\n      taskWindow.setDistance("0", "0", "0", "0");\n      taskWindow.pointBack(undefined, undefined, undefined, "white", "1", "black");\n      let pictureAnswer = new objectOnThePage("h2");\n      pictureAnswer.create(undefined, undefined, undefined, undefined, "0", "What is the excess item?");\n      pictureAnswer.fonts("3em", "sans-serif");\n      taskWindow.appendChild(pictureAnswer);\n      for (let i = 0; i < 4; i++) {\n        let task = new Image();\n        let item = Math.round(Math.random() * (numberTask.length - 1));\n        task.create(numberTask[item], "15em", "13em", undefined, undefined, "1.5em");\n        task.positioning(1110, "inline-block");\n        task.setMargins(\'10em\');\n        taskWindow.appendChild(task);\n        numberTask.splice(item, 1);\n      }\n\n      let enterButton = new objectOnThePage("button");\n      enterButton.create(undefined, undefined, undefined, undefined, undefined, "Check result!");\n      enterButton.fonts("1.5em");\n      taskWindow.appendChild(enterButton);\n      document.getElementById("globalPlayWindow").appendChild(taskWindow.div);\n\n      taskWindow.addEventListener("click", event => {\n        let target = event.target;\n        while (target !== taskWindow.div) {\n          if (target.tagName === "IMG") {\n            if (document.getElementsByClassName("right_picture")[0]) {\n              document.getElementsByClassName("right_picture")[0].className = \'\';\n            }\n            target.className = \'right_picture\';\n            if (target.src === String(document.location) + right) {\n              target.id = "right";\n            } else if ((target.src !== String(document.location)) + right && document.getElementById("right")) {\n              document.getElementById("right").id = "notRight";\n            }\n          }\n          target = target.parentNode;\n        }\n      });\n\n      enterButton.addEventListener("click", function () {\n        if (document.getElementById("right")) {\n          const fR = new faerbolRender_faerbolRender();\n          fR.createFaerbol(undefined, \'img/magicfaer.gif\');\n        } else {\n          const mFR = new monsterFaerbolRender_monsterFaerbolRender();\n          mFR.createFaerbol();\n        }\n        taskWindow.remove();\n        document.getElementById("spellbook").remove();\n      });\n    });\n    request.send();\n  }\n}\n// CONCATENATED MODULE: ./public/src/tasks/randomGen/randomCompounds.js\nclass randomCompounds {\n  constructor(words) {\n    this.words = words;\n    this.keys = [];\n  }\n\n  random() {\n    let wordsArr = [];\n    for (let i = 0; i < 4; i++) {\n      let keyGen = Object.keys(this.words)[Math.floor(Math.random() * Object.keys(this.words).length)];\n      wordsArr[i] = this.words[keyGen];\n      this.keys[i] = this.getKeyByValue(wordsArr[i]);\n      delete this.words[keyGen];\n    }\n    return wordsArr;\n  }\n\n  getKeyByValue(value) {\n    for (let prop in this.words) {\n      if (this.words.hasOwnProperty(prop)) {\n\n        if (this.words[prop] === value) {\n          return prop;\n        }\n      }\n    }\n  }\n}\n// CONCATENATED MODULE: ./public/src/tasks/compoundWordsGeneration.js\n\n\n\n\n\nclass compoundWordsGeneration_compoundWordsGeneration {\n  constructor(bigCapacity) {\n    let request = new XMLHttpRequest();\n    request.open("POST", "/getWords", true);\n    request.setRequestHeader("Content-Type", "application/json");\n    request.addEventListener("load", () => {\n      this.words = {};\n      for (let i = 0; i < JSON.parse(request.response).length; i++) {\n        let key = String(JSON.parse(request.response)[i].main_part);\n        this.words[`${key}`] = String(JSON.parse(request.response)[i].second_part);\n      }\n      this.getWords(bigCapacity);\n    });\n    request.send();\n  }\n\n  getWords(bigCapacity) {\n    let numberTask;\n    let rightArr = [];\n    let newCompounds = new randomCompounds(this.words);\n    numberTask = newCompounds.random();\n    let taskWindow = new objectOnThePage("div");\n    taskWindow.create("100%", "100%", undefined, "taskWindow", "auto", undefined);\n    taskWindow.positioning("1100", "block", "absolute", "center");\n    taskWindow.setDistance("0", "0", "0", "0");\n    taskWindow.pointBack(undefined, undefined, undefined, "white", "1", "black");\n    let compoundAnswer = new objectOnThePage("h2");\n    compoundAnswer.create(undefined, undefined, undefined, undefined, "0", "Drag parts of words from right to left to create compound word!");\n    compoundAnswer.fonts("3em", "sans-serif");\n    taskWindow.appendChild(compoundAnswer);\n    const allTask = new objectOnThePage("div");\n    allTask.create(undefined, undefined, undefined, "allTask", undefined, undefined, "word-wrapper");\n    const leftTask = new objectOnThePage("div");\n    leftTask.create("290px", "380px", undefined, "leftTask", "0");\n    leftTask.positioning(1110, "inline-block");\n    const rightTask = new objectOnThePage("div");\n    rightTask.create("165px", "380px", undefined, "rightTask", "0");\n    rightTask.positioning(1110, "inline-block");\n    for (let i = 0; i < 4; i++) {\n      rightArr[i] = String(newCompounds.keys[i] + numberTask[i]);\n    }\n    for (let i = 0; i < 4; i++) {\n      let task = new objectOnThePage("div");\n      let secondTask = new objectOnThePage("div");\n      let item = Math.round(Math.random() * (numberTask.length - 1));\n      task.create("250px", "70px", undefined, undefined, "20px", newCompounds.keys[i], "task");\n      task.positioning(1110, "inline-block");\n      task.borders("1px solid black");\n      task.setPaddings("20px", "60px");\n      task.fonts("2em");\n      leftTask.appendChild(task);\n\n      secondTask.create("125px", "70px", undefined, undefined, "20px", numberTask[item], "ui-widget ui-corner-all ui-state-error");\n      secondTask.positioning(1110, "relative");\n      secondTask.fonts("2em");\n      secondTask.specialSettings("true");\n      rightTask.appendChild(secondTask);\n      numberTask.splice(item, 1);\n    }\n\n    console.log(newCompounds.keys);\n    allTask.appendChild(leftTask);\n    allTask.appendChild(rightTask);\n    taskWindow.appendChild(allTask);\n\n    let enterButton = new objectOnThePage("button");\n    enterButton.create(undefined, undefined, undefined, undefined, "6em", "Check result!");\n    enterButton.fonts("1.5em");\n    taskWindow.appendChild(enterButton);\n    document.getElementById("globalPlayWindow").appendChild(taskWindow.div);\n    this.dragAndDrop(rightArr);\n\n    enterButton.addEventListener("click", function () {\n      if (document.getElementById("wrong") || !document.getElementById("right")) {\n        const mFR = new monsterFaerbolRender_monsterFaerbolRender();\n        mFR.createFaerbol();\n      } else {\n        const mFR = new faerbolRender_faerbolRender();\n        mFR.createFaerbol(bigCapacity, \'img/ugly.gif\');\n      }\n      $(".ui-widget").remove();\n      taskWindow.remove();\n      document.getElementById("spellbook").remove();\n    });\n  }\n\n  dragAndDrop(rightArr) {\n    for (let i = 0; i < 4; i++) {\n      let dragTask = document.getElementsByClassName("ui-widget")[i];\n\n      dragTask.onmousedown = function (e) {\n        var coords = getCoords(dragTask);\n        var shiftX = e.pageX - coords.left;\n        var shiftY = e.pageY - coords.top;\n\n        dragTask.style.position = "absolute";\n        document.body.appendChild(dragTask);\n        moveAt(e);\n\n        dragTask.style.zIndex = 2000; // над другими элементами\n\n        function moveAt(e) {\n          dragTask.style.left = e.pageX - shiftX + "px";\n          dragTask.style.top = e.pageY - shiftY + "px";\n        }\n\n        document.onmousemove = function (e) {\n          moveAt(e);\n        };\n\n        dragTask.onmouseup = function (e) {\n          document.onmousemove = null;\n          for (let j = 0; j < document.getElementsByClassName("task").length; j++) {\n            let leftC = getCoords(document.getElementsByClassName("task")[j]).left;\n            let topC = getCoords(document.getElementsByClassName("task")[j]).top;\n            if (e.pageX >= leftC && e.pageX <= leftC + 250 && e.pageY >= topC && e.pageY <= topC + 70) {\n              document.getElementsByClassName("task")[j].innerText += dragTask.innerText;\n              if (rightArr.indexOf(String(document.getElementsByClassName("task")[j].innerText)) !== -1) {\n                document.getElementsByClassName("task")[j].className += " right";\n                document.getElementsByClassName("task")[j].id = "right";\n              } else {\n                document.getElementsByClassName("task")[j].className += " wrong";\n                document.getElementsByClassName("task")[j].id = "wrong";\n              }\n              dragTask.remove();\n              e.stopPropagation();\n              break;\n            }\n          }\n          dragTask.onmouseup = null;\n        };\n      };\n\n      dragTask.ondragstart = function () {\n        return false;\n      };\n\n      function getCoords(elem) {\n        // кроме IE8-\n        let box = elem.getBoundingClientRect();\n        return {\n          top: box.top + pageYOffset,\n          left: box.left + pageXOffset\n        };\n      }\n    }\n  }\n\n}\n// CONCATENATED MODULE: ./public/src/tasks/randomGen/randomLogo.js\nclass randomLogo {\n\n    constructor(pictures) {\n        this.pictures = pictures;\n        this.keys = [];\n    }\n\n    random() {\n\n        let srcArr = [];\n        for (let i = 0; i < 3; i++) {\n            let keyGen = Object.keys(this.pictures)[Math.floor(Math.random() * Object.keys(this.pictures).length)];\n            srcArr[i] = this.pictures[keyGen];\n            this.keys[i] = this.getKeyByValue(srcArr[i]);\n            delete this.pictures[keyGen];\n        }\n        return srcArr;\n    }\n\n    getKeyByValue(value) {\n        for (let prop in this.pictures) {\n            if (this.pictures.hasOwnProperty(prop)) {\n                if (this.pictures[prop] === value) {\n                    return prop;\n                }\n            }\n        }\n    }\n\n}\n// CONCATENATED MODULE: ./public/src/tasks/logoGeneration.js\n\n\n\n\n\n\nclass logoGeneration_logoGeneration {\n  constructor() {\n    let request = new XMLHttpRequest();\n    request.open("POST", "/getLogos", true);\n    request.setRequestHeader("Content-Type", "application/json");\n    request.addEventListener("load", () => {\n      this.logos = {};\n      for (let i = 0; i < JSON.parse(request.response).length; i++) {\n        let key = String(JSON.parse(request.response)[i].logo);\n        this.logos[`${key}`] = String(JSON.parse(request.response)[i].src);\n      }\n      this.getLogos();\n    });\n    request.send();\n  }\n\n  getLogos() {\n    let numberTask;\n    let newPictures = new randomLogo(this.logos);\n    numberTask = newPictures.random();\n    let randomItem = Math.round(Math.random() * (newPictures.keys.length - 1));\n    const model = String(newPictures.keys[randomItem]);\n    const rightSrc = numberTask[randomItem];\n    let taskWindow = new objectOnThePage("div");\n    taskWindow.create("100%", "100%", undefined, undefined, "auto", undefined, "chosePicture");\n    taskWindow.positioning("1100", "block", "absolute", "center");\n    taskWindow.setDistance("0", "0", "0", "0");\n    taskWindow.pointBack(undefined, undefined, undefined, "white", "1", "black");\n    let pictureAnswer = new objectOnThePage("h2");\n    pictureAnswer.create(undefined, undefined, undefined, undefined, "0", `Select ${model.toUpperCase()} logo and check your answer!`);\n    pictureAnswer.fonts("3em", "sans-serif");\n    taskWindow.appendChild(pictureAnswer);\n    for (let i = 0; i < 3; i++) {\n      let task = new Image();\n      let item = Math.round(Math.random() * (numberTask.length - 1));\n      task.create(numberTask[item], "15em", "13em", undefined, undefined, "1.5em");\n      task.positioning(1110, "inline-block");\n      task.setMargins("10em", "3em");\n      taskWindow.appendChild(task);\n      numberTask.splice(item, 1);\n    }\n\n    let enterButton = new objectOnThePage("button");\n    enterButton.create(undefined, undefined, undefined, undefined, "3em", "Check result!");\n    enterButton.fonts("1.5em");\n    taskWindow.appendChild(enterButton);\n    document.getElementById("globalPlayWindow").appendChild(taskWindow.div);\n\n    taskWindow.addEventListener("click", event => {\n      let target = event.target;\n      while (target !== taskWindow.div) {\n        if (target.tagName === "IMG") {\n          if (document.getElementsByClassName("right_picture")[0]) {\n            document.getElementsByClassName("right_picture")[0].className = \'\';\n          }\n          target.className = \'right_picture\';\n          if (target.src === String(document.location) + rightSrc) {\n            target.id = "right";\n          } else if (target.src !== String(document.location) + rightSrc && document.getElementById("right")) {\n            document.getElementById("right").id = "notRight";\n          }\n        }\n        target = target.parentNode;\n      }\n    });\n\n    enterButton.addEventListener("click", function () {\n      if (document.getElementById("right")) {\n        const fR = new faerbolRender_faerbolRender();\n        fR.createFaerbol(undefined, \'img/slowfaerball.gif\');\n      } else {\n        const mFR = new monsterFaerbolRender_monsterFaerbolRender();\n        mFR.createFaerbol();\n      }\n      taskWindow.remove();\n      document.getElementById("spellbook").remove();\n    });\n  }\n}\n// CONCATENATED MODULE: ./public/src/windows/spellBookRender.js\n\n\n\n\n\n\n\n\nclass spellBookRender_spellBookRender {\n  constructor() {\n    if (document.getElementById("getDamage")) {\n      document.getElementById("getDamage").remove();\n    }\n    this.spellBookMain = new objectOnThePage("div");\n    this.spellBookMain.create("65.6em", "46.70em", undefined, "spellbook");\n    this.spellBookMain.positioning("1000", undefined, "absolute");\n    this.spellBookMain.setMargins("1.250em", "28.125em");\n    this.spellBookMain.pointBack(undefined, "url(img/spellbook.png)", "100%");\n  }\n\n  createСhoice() {\n    let pToChoose = new objectOnThePage("p");\n    pToChoose.create(undefined, undefined, undefined, undefined, undefined, "Please select a spell");\n    pToChoose.positioning(undefined, "block");\n    pToChoose.pointBack(undefined, undefined, undefined, undefined, undefined, "#0000ff");\n    pToChoose.fonts("2.500em", "COMMERCIALSCRIPT BT");\n    pToChoose.setPaddings("4.250em", "5.5em");\n    this.spellBookMain.appendChild(pToChoose);\n\n    let normalDamage = new objectOnThePage("button");\n    let doubleDamage = new objectOnThePage("button");\n    normalDamage.create("12.500em", "5.625em", undefined, "normalDamage", undefined, "NORMAL DAMAGE");\n    normalDamage.positioning(undefined, "inline-block");\n    normalDamage.setMargins(undefined, "15.625em");\n    normalDamage.pointBack(undefined, undefined, undefined, "yellow");\n    normalDamage.addEventListener("click", () => {\n      normalDamage.positioning(undefined, "none");\n      doubleDamage.positioning(undefined, "none");\n\n      this.createNormalTasksButtons();\n    });\n    this.spellBookMain.appendChild(normalDamage);\n\n    doubleDamage.create("12.500em", "5.625em", undefined, "doubleDamage", undefined, "DOUBLE DAMAGE");\n    doubleDamage.positioning(undefined, "inline-block");\n    doubleDamage.setMargins(undefined, "6.250em");\n    doubleDamage.pointBack(undefined, undefined, undefined, "yellow");\n    doubleDamage.addEventListener("click", () => {\n      doubleDamage.positioning(undefined, "none");\n      normalDamage.positioning(undefined, "none");\n\n      this.createHardTasksButtons(true);\n    });\n    this.spellBookMain.appendChild(doubleDamage);\n    document.getElementById("globalPlayWindow").appendChild(this.spellBookMain.div);\n  }\n\n  createNormalTasksButtons() {\n    this.createHardTasksButtons();\n    let puzzleButton = new objectOnThePage("button");\n    puzzleButton.create("12.500em", "5.625em", undefined, undefined, undefined, "Guess the puzzle");\n    puzzleButton.positioning(undefined, "inline-block");\n    puzzleButton.setMargins("2em", "15.625em");\n    puzzleButton.pointBack(undefined, undefined, undefined, "yellow");\n    puzzleButton.addEventListener("click", () => {\n      const rG = new riddlesGeneration_riddlesGeneration();\n      rG.createInterface();\n\n      this.spellBookMain.positioning(undefined, "none");\n    });\n    this.spellBookMain.appendChild(puzzleButton);\n\n    let pictureTaskButton = new objectOnThePage("button");\n    pictureTaskButton.create("12.500em", "5.625em", undefined, undefined, undefined, "Who is in the picture");\n    pictureTaskButton.positioning(undefined, "inline-block");\n    pictureTaskButton.setMargins("2em", "6.250em");\n    pictureTaskButton.pointBack(undefined, undefined, undefined, "yellow");\n    pictureTaskButton.addEventListener("click", () => {\n      const pG = new pictureGeneration_pictureGeneration();\n\n      this.spellBookMain.positioning(undefined, "none");\n    });\n    this.spellBookMain.appendChild(pictureTaskButton);\n\n    let chosePicture = new objectOnThePage("button");\n    chosePicture.create("12.500em", "5.625em", undefined, undefined, undefined, "Find excess image");\n    chosePicture.positioning(undefined, "inline-block");\n    chosePicture.setMargins("2em", "15.625em");\n    chosePicture.pointBack(undefined, undefined, undefined, "yellow");\n    chosePicture.addEventListener("click", () => {\n      const cPG = new chosePictureGeneration_chosePictureGeneration();\n      this.spellBookMain.positioning(undefined, "none");\n    });\n    this.spellBookMain.appendChild(chosePicture);\n\n    let choseLogo = new objectOnThePage("button");\n    choseLogo.create("12.500em", "5.625em", undefined, undefined, undefined, "Cars logo");\n    choseLogo.positioning(undefined, "inline-block");\n    choseLogo.setMargins("2em", "6.250em");\n    choseLogo.pointBack(undefined, undefined, undefined, "yellow");\n    choseLogo.addEventListener("click", () => {\n      const cW = new logoGeneration_logoGeneration();\n      this.spellBookMain.positioning(undefined, "none");\n    });\n    this.spellBookMain.appendChild(choseLogo);\n  }\n\n  createHardTasksButtons(bigCapacity) {\n    let ariphmeticButton = new objectOnThePage("button");\n    ariphmeticButton.create("12.500em", "5.625em", undefined, undefined, undefined, "Solve the example");\n    ariphmeticButton.positioning(undefined, "inline-block");\n    ariphmeticButton.setMargins(undefined, "15.625em");\n    ariphmeticButton.pointBack(undefined, undefined, undefined, "yellow");\n    ariphmeticButton.addEventListener("click", () => {\n      taskGeneration_taskGeneration.generate(bigCapacity);\n      this.spellBookMain.positioning(undefined, "none");\n    });\n    this.spellBookMain.appendChild(ariphmeticButton);\n\n    let compoundWords = new objectOnThePage("button");\n    compoundWords.create("12.500em", "5.625em", undefined, undefined, undefined, "Compound Words");\n    compoundWords.positioning(undefined, "inline-block");\n    compoundWords.setMargins(undefined, "6.250em");\n    compoundWords.pointBack(undefined, undefined, undefined, "yellow");\n    compoundWords.addEventListener("click", () => {\n      const cW = new compoundWordsGeneration_compoundWordsGeneration(bigCapacity);\n      this.spellBookMain.positioning(undefined, "none");\n    });\n    this.spellBookMain.appendChild(compoundWords);\n  }\n}\n// CONCATENATED MODULE: ./public/src/windows/toRun.js\n\n\n\n\n\n\n\n\n\n\n\nclass toRun_toRun {\n  static run() {\n    if (document.getElementById("startMenu")) {\n      document.getElementById("startMenu").remove();\n    }\n    const rBack = new randomBackground();\n    let globalPlayWindow = new objectOnThePage("div");\n    globalPlayWindow.create("100%", "100%", undefined, "globalPlayWindow");\n    globalPlayWindow.pointBack(undefined, `url(${rBack.generateBackgrounds()})`, "100%");\n    let gg = new Image();\n    let monster = new objectOnThePage("div");\n    let spellBook = new objectOnThePage("button");\n    globalPlayWindow.appendChild(gg);\n    globalPlayWindow.appendChild(spellBook);\n    globalPlayWindow.appendChild(monster);\n    let audioPlay = new objectOnThePage("div");\n    let audioMortal = `<audio src=\'audio/glavnaya-tema-iz-8-bitnoy-igry-mortal-kombat.mp3\' id = \'mortalCombat\' autoplay = \'autoplay\' loop></audio>`;\n    audioPlay.create("0%", "0%", audioMortal);\n    globalPlayWindow.appendChild(audioPlay);\n    document.body.appendChild(globalPlayWindow.div);\n    let enabled;\n    if (document.getElementById("mortalCombat")) {\n      console.log("denabled");\n      if (document.getElementById("disabled")) {\n        console.log("disabled");\n        document.getElementById("mortalCombat").volume = 0;\n        enabled = false;\n      } else if (document.getElementById("enabled")) {\n        console.log("enabled");\n        document.getElementById("mortalCombat").volume = 1;\n        enabled = true;\n      }\n    }\n\n    if (document.getElementById("audiomain")) {\n      console.log("denabled");\n      if (document.getElementById("disabled")) {\n        console.log("disabled");\n        document.getElementById("audiomain").volume = 0;\n        enabled = false;\n      } else if (document.getElementById("enabled")) {\n        console.log("enabled");\n        document.getElementById("audiomain").volume = 1;\n        enabled = true;\n      }\n    }\n    let AudioOnOff = new objectOnThePage("button");\n\n    if (enabled) {\n      AudioOnOff.create("4.125em", "2.563em", "&#128266", "enabled", undefined, undefined, "toRunAudio");\n    } else {\n      AudioOnOff.create("4.125em", "2.563em", "&#128263", "disabled", undefined, undefined, "toRunAudio");\n    }\n    AudioOnOff.positioning("1010", undefined, "absolute");\n    AudioOnOff.setDistance("0", undefined, "0");\n    AudioOnOff.addEventListener("click", function () {\n      console.log("click");\n      if (enabled) {\n        AudioOnOff.create(undefined, undefined, "&#128263", "disabled", undefined, undefined, "toRunAudio");\n        enabled = false;\n        if (document.getElementById("audiomain")) document.getElementById("audiomain").volume = 0;\n        if (document.getElementById("mortalCombat")) document.getElementById("mortalCombat").volume = 0;\n        if (document.getElementById("fail")) document.getElementById("fail").volume = 0;\n        if (document.getElementById("victory")) document.getElementById("victory").volume = 0;\n      } else {\n        AudioOnOff.create(undefined, undefined, "&#128266", "enabled", undefined, undefined, "toRunAudio");\n        enabled = true;\n        if (document.getElementById("audiomain")) document.getElementById("audiomain").volume = 1;\n        if (document.getElementById("mortalCombat")) document.getElementById("mortalCombat").volume = 1;\n        if (document.getElementById("fail")) document.getElementById("fail").volume = 1;\n        if (document.getElementById("victory")) document.getElementById("victory").volume = 1;\n      }\n\n      if (document.getElementsByClassName("firstButton")[0]) {\n        document.getElementsByClassName("firstButton")[0].remove();\n      }\n    });\n    document.body.appendChild(AudioOnOff.div);\n\n    let sBBRender = new spellBookButtonRender(spellBook);\n    this.createGg(gg);\n    this.createMonster(monster);\n    spellBook.addEventListener("click", function () {\n      spellBook.forButton(undefined, true);\n      const sBR = new spellBookRender_spellBookRender();\n      sBR.createСhoice();\n    });\n  }\n\n  static createMonster(monster) {\n    let newMonster = new monsterGeneration();\n    newMonster.createHead();\n    newMonster.createBody();\n    newMonster.createArms();\n    newMonster.createLegs();\n    newMonster.createWeapon();\n    newMonster.createMonster(monster);\n    const nameOfMonster = new getName();\n    interfaceMonsterRender_interfaceMonsterRender.create(nameOfMonster.getMonsterName());\n  }\n\n  static createGg(gg) {\n    let Gg = new ggRender(gg);\n    interfaceGgRender_interfaceGgRender.create(document.getElementById("nameArea").value);\n  }\n}\n// CONCATENATED MODULE: ./public/src/windows/enterName.js\n\n\n\n\n\nclass enterName_enterName {\n  run() {\n    if (!getInfo_getInfo.users) {\n      const windowName = new objectOnThePage("form");\n      windowName.create("32.000em", "25.000em", undefined, "windowName", "auto");\n      windowName.setDistance("0", "0", "0", "0");\n      windowName.positioning("1", "block", "absolute", "center");\n      windowName.pointBack(undefined, undefined, undefined, "black", ".5", "white");\n      let enterH2 = new objectOnThePage("label");\n      enterH2.create(undefined, undefined, undefined, "enterH2", "auto", "Enter your name: ");\n      enterH2.positioning(undefined, "block");\n      enterH2.fonts("1.5em", "sans-serif");\n      this.nameArea = new Input();\n      this.nameArea.create("text", true, undefined, undefined, undefined, "nameArea", "auto");\n      this.nameArea.positioning(undefined, "block");\n      let passwordH2 = new objectOnThePage("label");\n      passwordH2.create(undefined, undefined, undefined, "passwordH2", "auto", "Enter your password: ");\n      passwordH2.positioning(undefined, "block");\n      passwordH2.fonts("1.5em", "sans-serif");\n      this.passwordArea = new Input();\n      this.passwordArea.create("password", true, undefined, undefined, undefined, "passwordArea", "auto");\n      this.passwordArea.positioning(undefined, "block");\n      let errorEnter = new objectOnThePage("label");\n      errorEnter.create(undefined, undefined, undefined, "errorEnter", "auto", "Incorrect name!");\n      errorEnter.positioning(undefined, "block");\n      errorEnter.fonts("1.2em", "sans-serif");\n      errorEnter.pointBack(undefined, undefined, undefined, undefined, undefined, "red", "hidden");\n      let registerButton = new Input();\n      registerButton.create("submit", undefined, undefined, undefined, undefined, "registerButton", "0.3em");\n      registerButton.value("SIGN IN");\n      registerButton.positioning(undefined, "inline-block");\n      registerButton.fonts("1.5em");\n      let enterButton = new Input();\n      enterButton.create("submit", undefined, undefined, undefined, undefined, "enterButton", "0.3em");\n      enterButton.value("GET IN");\n      enterButton.positioning(undefined, "inline-block");\n      enterButton.fonts("1.5em");\n      let mailH2 = new objectOnThePage("label");\n      mailH2.create(undefined, undefined, undefined, "enterH2", "auto", "Enter your mail(not obligatory) in format xxx@mail.ru: ");\n      mailH2.positioning(undefined, "block");\n      mailH2.fonts("1.5em", "sans-serif");\n      this.mailArea = new Input();\n      this.mailArea.create("email", undefined, undefined, undefined, undefined, "mailArea", "auto");\n      this.mailArea.positioning(undefined, "block");\n      this.mailArea.fonts("1.5em");\n\n      windowName.appendChild(enterH2);\n      windowName.appendChild(this.nameArea);\n      windowName.appendChild(passwordH2);\n      windowName.appendChild(this.passwordArea);\n      windowName.appendChild(errorEnter);\n      windowName.appendChild(mailH2);\n      windowName.appendChild(this.mailArea);\n      windowName.appendChild(registerButton);\n      windowName.appendChild(enterButton);\n      document.body.appendChild(windowName.div);\n\n      $("#nameArea").keyup(function (event) {\n        if (event.keyCode == 13) {\n          $("#enterButton").click();\n        }\n      });\n\n      $("#passwordArea").keyup(function (event) {\n        if (event.keyCode == 13) {\n          $("#enterButton").click();\n        }\n      });\n\n      $("#mailArea").keyup(function (event) {\n        if (event.keyCode == 13) {\n          $("#enterButton").click();\n        }\n      });\n\n      this.nameArea.addEventListener("focus", () => {\n        this.nameArea.borders(undefined, "blue");\n        errorEnter.pointBack(undefined, undefined, undefined, undefined, undefined, undefined, "hidden");\n      });\n\n      this.passwordArea.addEventListener("focus", () => {\n        this.passwordArea.borders(undefined, "blue");\n        errorEnter.pointBack(undefined, undefined, undefined, undefined, undefined, undefined, "hidden");\n      });\n\n      this.mailArea.addEventListener("click", () => {\n        this.mailArea.borders(undefined, "blue");\n      });\n\n      registerButton.addEventListener("click", event => {\n        event.preventDefault();\n        if (!this.nameArea.value().match(/\\w/)) {\n          alert("Please enter you nickname to continue!");\n        } else if (!this.passwordArea.value().match(/\\w/) || this.passwordArea.value().length < 8) {\n          alert("The password cannot contain less than 8 Latin characters(lowercase or uppercase) or numbers !");\n        } else {\n          this.register();\n        }\n      });\n\n      enterButton.addEventListener("click", event => {\n        event.preventDefault();\n        if (!this.nameArea.value().match(/\\w/)) {\n          alert("Please enter you nickname to continue!");\n        } else if (!this.passwordArea.value().match(/\\w/) || this.passwordArea.value().length < 8) {\n          alert("The password cannot contain less than 8 Latin characters(lowercase or uppercase) or numbers !");\n        } else {\n          this.enter();\n        }\n      });\n    } else {\n      toRun_toRun.run();\n    }\n  }\n\n  escape(string) {\n    const htmlEscapes = {\n      "&": "&amp;",\n      "<": "&lt;",\n      ">": "&gt;",\n      \'"\': "&quot;",\n      "\'": "&#39;"\n    };\n\n    return string.replace(/[&<>"\']/g, function (match) {\n      return htmlEscapes[match];\n    });\n  }\n\n  register() {\n    this.nameArea.create(undefined, false);\n    this.passwordArea.create(undefined, false);\n    const playerName = this.escape(this.nameArea.value());\n    const playerPass = this.escape(this.passwordArea.value());\n    const mail = this.escape(this.mailArea.value());\n    const recordSQL = JSON.stringify({\n      name: playerName,\n      password: playerPass,\n      score: 0,\n      mail: mail\n    });\n    let request = new XMLHttpRequest();\n    request.open("POST", "/check", true);\n    request.setRequestHeader("Content-Type", "application/json");\n    request.addEventListener("load", () => {\n      if (JSON.parse(request.response).res === "undefined") {\n        let request_rc = new XMLHttpRequest();\n        request_rc.open("POST", "/record", true);\n        request_rc.setRequestHeader("Content-Type", "application/json");\n        if (mail.indexOf("@mail.ru") !== -1) this.sendToMail(recordSQL);\n        request_rc.send(recordSQL);\n        getInfo_getInfo.getId(recordSQL);\n      } else {\n        document.getElementById("errorEnter").style.visibility = "visible";\n        document.getElementById("enterH2").style.borderColor = "red";\n        document.getElementById("errorEnter").innerText = "This name already exists!";\n      }\n    });\n    request.send(recordSQL);\n  }\n\n  enter() {\n    this.nameArea.create(undefined, false);\n    this.passwordArea.create(undefined, false);\n    const playerName = this.escape(this.nameArea.value());\n    const playerPass = this.escape(this.passwordArea.value());\n    const checkSQL = JSON.stringify({\n      name: playerName,\n      password: playerPass\n    });\n    getInfo_getInfo.getId(checkSQL);\n  }\n\n  sendToMail(recordSQL) {\n    let request = new XMLHttpRequest();\n    request.open("POST", "/sendToMail", true);\n    request.setRequestHeader("Content-Type", "application/json");\n    request.send(recordSQL);\n  }\n}\n// CONCATENATED MODULE: ./public/src/buttons/createReturnButton.js\n\n\nclass createReturnButton_createReturnButton {\n    constructor() {\n        let ReturnButton = new objectOnThePage(\'button\');\n        ReturnButton.create(\'4.125em\', \'2.563em\', "&#9668", undefined);\n        ReturnButton.positioning(\'1100\', undefined, \'absolute\');\n        ReturnButton.addEventListener(\'click\', function () {\n            ReturnButton.remove();\n            document.getElementById(\'additionalWindow\').remove();\n            document.getElementById(\'playButton\').style.display = \'inline-block\';\n            document.getElementById(\'screenButton\').style.display = \'inline-block\';\n            document.getElementById(\'scoreButton\').style.display = \'inline-block\';\n            document.getElementById(\'nameOfGame\').style.display = \'block\';\n        });\n        document.body.appendChild(ReturnButton.div);\n    }\n}\n// CONCATENATED MODULE: ./public/src/windows/init.js\n\n\n\n\n\nclass init_init {\n  startWindowRender() {\n    this.startMenu = new objectOnThePage("div");\n    this.startMenu.create(100 + "%", 100 + "%", undefined, "startMenu");\n    this.startMenu.pointBack("center", "url(img/mainBackground.jpg) center center fixed", "cover");\n    document.body.appendChild(this.startMenu.div);\n  }\n\n  startWindowInterface() {\n    this.nameOfGame = new objectOnThePage("h1");\n    this.nameOfGame.create(undefined, undefined, undefined, "nameOfGame", undefined, "MONSTER KILL");\n    this.nameOfGame.pointBack(undefined, undefined, undefined, undefined, undefined, "black");\n    this.startMenu.appendChild(this.nameOfGame);\n    this.playButton = new objectOnThePage("button");\n    this.playButton.create("12.500em", "5.625em", undefined, "playButton", undefined, "Play");\n    this.startMenu.appendChild(this.playButton);\n    this.scoreButton = new objectOnThePage("button");\n    this.scoreButton.create("12.500em", "5.625em", undefined, "scoreButton", undefined, "Score");\n    this.startMenu.appendChild(this.scoreButton);\n    this.screenButton = new objectOnThePage("button");\n    this.screenButton.create("12.500em", "5.625em", undefined, "screenButton", undefined, "A screenshot of gameplay");\n    this.screenButton.setPaddings("1.48em");\n    this.startMenu.appendChild(this.screenButton);\n  }\n\n  audioCreate() {\n    let enabled;\n    let innerAudio = `<audio src="audio/BGsound.mp3" width="0" height="0" align = "center" id = "audiomain" autoplay="autoplay" loop></audio>`;\n    let audio = new objectOnThePage("div");\n    audio.create("0", "0", innerAudio);\n    this.startMenu.appendChild(audio);\n\n    const firstRunAudio = `<object width="0" height="0" align="center" id = "mainaudio">\n\n<param name="movie" value="audio/BGsound.mp3">\n<embed src="audio/BGsound.mp3"\nautostart="true"\nwidth="0"\nheight="0"\nalign="center"\ntype="audio/mid"\npluginspage="http://www.macromedia.com/go/getflashplayer"\nloop = "True">\n</object>`;\n\n    const firstAudioDiv = new objectOnThePage("div");\n    firstAudioDiv.create("0", "0", firstRunAudio);\n    this.startMenu.appendChild(firstAudioDiv);\n    let AudioOnOff = new objectOnThePage("button");\n    if (document.getElementById("disabled")) {\n      if (document.getElementById("mainaudio")) document.getElementById("mainaudio").remove();\n      console.log("disabled");\n      if (document.getElementById("audiomain")) {\n        document.getElementById("audiomain").volume = 0;\n      }\n      enabled = false;\n      AudioOnOff.create("4.125em", "2.563em", "&#128263", "disabled", undefined, undefined, "firstButton");\n    } else if (document.getElementById("enabled")) {\n      if (document.getElementById("mainaudio")) document.getElementById("mainaudio").remove();\n      console.log("enabled");\n      if (document.getElementById("audiomain")) {\n        document.getElementById("audiomain").volume = 1;\n      }\n      enabled = true;\n      AudioOnOff.create("4.125em", "2.563em", "&#128266", "enabled", undefined, undefined, "firstButton");\n    } else {\n      enabled = true;\n      AudioOnOff.create("4.125em", "2.563em", "&#128266", "enabled", undefined, undefined, "firstButton");\n    }\n\n    if (document.getElementsByClassName("firstButton")[0]) {\n      if (document.getElementsByClassName("firstButton")[0].innerHTML === "&#128266") {\n        if (document.getElementById("audiomain")) {\n          document.getElementById("audiomain").volume = 1;\n        }\n      } else if (document.getElementsByClassName("firstButton")[0].innerHTML === "&#128263") {\n        if (document.getElementById("audiomain")) {\n          document.getElementById("audiomain").volume = 0;\n        }\n      }\n    }\n\n    AudioOnOff.positioning("1000", undefined, "absolute");\n    AudioOnOff.setDistance("0", undefined, "0");\n    AudioOnOff.addEventListener("click", () => {\n      console.log("click");\n      if (enabled) {\n        AudioOnOff.create(undefined, undefined, "&#128263", "disabled", undefined, undefined, "firstButton");\n        enabled = false;\n        if (document.getElementById("audiomain")) document.getElementById("audiomain").volume = 0;\n        if (document.getElementById("mortalCombat")) document.getElementById("mortalCombat").volume = 0;\n        if (document.getElementById("mainaudio")) document.getElementById("mainaudio").remove();\n      } else {\n        AudioOnOff.create(undefined, undefined, "&#128266", "enabled", undefined, undefined, "firstButton");\n        enabled = true;\n        if (document.getElementById("audiomain")) document.getElementById("audiomain").volume = 1;\n        if (document.getElementById("mortalCombat")) document.getElementById("mortalCombat").volume = 1;\n\n        if (document.getElementsByClassName("toRunAudio")[0]) {\n          document.getElementsByClassName("toRunAudio")[0].remove();\n        }\n        firstAudioDiv.create("0", "0", firstRunAudio);\n        this.startMenu.appendChild(firstAudioDiv);\n      }\n    });\n    document.body.appendChild(AudioOnOff.div);\n  }\n\n  createScore() {\n    this.scoreButton.addEventListener("click", () => {\n      let additionalWindow = new objectOnThePage("div");\n      additionalWindow.create("100%", "100%", undefined, "additionalWindow");\n      additionalWindow.positioning(undefined, undefined, "absolute");\n      this.screenButton.positioning(undefined, "none");\n      this.playButton.positioning(undefined, "none");\n      this.scoreButton.positioning(undefined, "none");\n      document.getElementById("nameOfGame").style.display = "none";\n      this.startMenu.positioning(undefined, undefined, "absolute");\n\n      const scoreTable = new objectOnThePage("table");\n      scoreTable.create(undefined, undefined, undefined, "scoreTable", "auto");\n      scoreTable.positioning("1000", undefined, "relative");\n      additionalWindow.appendChild(scoreTable);\n      let request = new XMLHttpRequest();\n      request.open("POST", "/score", true);\n      request.setRequestHeader("Content-Type", "application/json");\n      request.addEventListener("load", () => {\n        document.getElementById("scoreTable").innerHTML = `\n                        <thead>\n                            <tr>\n                                <th>\n                                    Name\n                                </th>\n                                <th>\n                                    Score\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody id = \'scoreTbody\'>\n                        </tbody>`;\n        const cells = JSON.parse(request.response).map(item => {\n          return `<tr>\n                                <td>${item.name}</td>\n                                <td>${item.score}</td>\n                            </tr>\n                        </tbody>\n                    </table>`;\n        });\n        document.getElementById("scoreTbody").innerHTML += cells;\n      });\n      request.send();\n\n      additionalWindow.positioning(undefined, "block");\n      //additionalWindow.appendChild(scoreTable);\n\n      document.body.appendChild(additionalWindow.div);\n      const cRB = new createReturnButton_createReturnButton();\n    });\n  }\n\n  createScreen() {\n    this.startMenu.positioning(undefined, "block", "absolute");\n    this.screenButton.addEventListener("click", () => {\n      let additionalWindow = new objectOnThePage("div");\n      additionalWindow.create("100%", "100%", undefined, "additionalWindow");\n      additionalWindow.positioning(undefined, undefined, "absolute");\n      additionalWindow.setDistance(0, 0);\n      this.screenButton.positioning(undefined, "none");\n      this.playButton.positioning(undefined, "none");\n      this.scoreButton.positioning(undefined, "none");\n\n      let imageGameplay = new Image();\n      imageGameplay.create("img/Gameplay.png", "80%", "70%", undefined, undefined, "auto");\n      imageGameplay.positioning("1000", "block");\n      additionalWindow.positioning(undefined, "block");\n      additionalWindow.appendChild(imageGameplay);\n      document.body.appendChild(additionalWindow.div);\n      const cRB = new createReturnButton_createReturnButton();\n    });\n    this.playButton.addEventListener("click", () => {\n      this.startMenu.positioning(undefined, "none", "absolute");\n      document.getElementById("info").style.display = "none";\n      document.body.style.background = \'url(img/mainBackground.jpg) center center fixed\';\n      document.body.style.backgroundSize = \'cover\';\n      const eN = new enterName_enterName();\n      eN.run();\n    });\n  }\n}\n// CONCATENATED MODULE: ./public/src/index.js\n\n// The main game loop\n\nconst src_letStart = new init_init();\nsrc_letStart.startWindowRender();\nsrc_letStart.startWindowInterface();\nsrc_letStart.audioCreate();\nsrc_letStart.createScore();\nsrc_letStart.createScreen();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')}]);